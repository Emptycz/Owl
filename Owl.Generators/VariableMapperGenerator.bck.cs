// using System.Text;
// using Microsoft.CodeAnalysis;
// using Microsoft.CodeAnalysis.CSharp;
// using Microsoft.CodeAnalysis.CSharp.Syntax;
// using Microsoft.CodeAnalysis.Text;
//
// namespace Owl.Generators;
//
// [Generator]
// public class VariableResolverGeneratorBck : ISourceGenerator
// {
//     public void Initialize(GeneratorInitializationContext context)
//     {
//         // No initialization required
//     }
//
//     public void Execute(GeneratorExecutionContext context)
//     {
//         string switchStatement = GenerateSwitchStatement(context, out string constructorParams);
//
//         var methodBuilder = new StringBuilder();
//
//         // Generate the constructor for VariableResolverFactory
//         methodBuilder.AppendLine("""
//                              // <auto-generated/>
//                              #pragma warning disable
//                              #nullable enable
//
//                              using System;
//                              using Owl.Models.Variables;
//                              using Owl.States;
//                              using Owl.Repositories.RequestNode;
//
//                              namespace Owl.Services.VariableResolvers;
//                              """);
//
//         if (constructorParams.Length > 0)
//         {
//             methodBuilder.AppendLine($"public partial class VariableResolverFactory({constructorParams}) : IVariableResolverFactory");
//             methodBuilder.AppendLine("{");
//         }
//         else
//         {
//             methodBuilder.AppendLine("""
//                                      public partial class VariableResolverFactory()  : IVariableResolverFactory
//                                      {
//                                      """);
//         }
//
//         methodBuilder.AppendLine("private IVariableResolver SourceGenMapping(IVariable variable)");
//         methodBuilder.AppendLine("{");
//         methodBuilder.AppendLine("return variable switch");
//         methodBuilder.AppendLine("{");
//         methodBuilder.Append(switchStatement);
//         methodBuilder.AppendLine("};");
//         methodBuilder.AppendLine("}");
//         methodBuilder.AppendLine("}");
//
//         // Add the generated source code to the compilation
//         context.AddSource("Owl.Services.VariableResolvers.VariableResolverFactory.g.cs", SourceText.From(methodBuilder.ToString(), Encoding.UTF8));
//     }
//
//     private static string GenerateSwitchStatement(GeneratorExecutionContext context, out string constructorParams)
//     {
//         StringBuilder methodBuilder = new();
//         List<IParameterSymbol> paramList = [];
//         var syntaxTrees = context.Compilation.SyntaxTrees;
//         INamedTypeSymbol? ivariableSymbol = context.Compilation.GetTypeByMetadataName("Owl.Models.Variables.IVariable");
//
//         if (ivariableSymbol is null)
//         {
//             // TODO: throw an error
//             constructorParams = string.Empty;
//             return String.Empty;
//         }
//
//         foreach (var tree in syntaxTrees)
//         {
//             var semanticModel = context.Compilation.GetSemanticModel(tree);
//             var root = tree.GetRoot();
//
//             // Find all classes with the RegisterToVariableResolver attribute
//             var classesWithAttribute = root.DescendantNodes()
//                 .OfType<ClassDeclarationSyntax>()
//                 .Where(cls => cls.AttributeLists
//                     .Any(attrList => attrList.Attributes
//                         .Any(attr => attr.Name.ToString() == "RegisterToVariableResolver")));
//
//             foreach (var cls in classesWithAttribute)
//             {
//                 var classSymbol = semanticModel.GetDeclaredSymbol(cls);
//                 var attributeData = classSymbol?.GetAttributes()
//                     .FirstOrDefault(attr => attr.AttributeClass?.Name == "RegisterToVariableResolver");
//
//                 if (attributeData is null) continue;
//
//                 var resolverType = attributeData.ConstructorArguments.FirstOrDefault().Value as INamedTypeSymbol;
//
//                 if (resolverType is null) continue;
//
//                 // Check constructor parameters of the resolver
//                 var constructors = resolverType.Constructors;
//                 IParameterSymbol[] requiredParams = constructors
//                     .SelectMany(c => c.Parameters)
//                     .Where(p => p.Type.BaseType?.Interfaces.FirstOrDefault()?.Name != "IVariable")
//                     .ToArray();
//
//                 if (requiredParams.Length > 0)
//                 {
//                     paramList.AddRange(requiredParams);
//                 }
//
//                 string className = cls.Identifier.Text;
//                 string variableName = char.ToLowerInvariant(className[0]) + className[1..]; // variable name in camel case
//
//                 // Generate the case for each variable type
//                 string paramString = string.Join(", ", requiredParams
//                         .Select(p => $"{p.Name}"));
//
//                 methodBuilder.AppendLine($"        {className} {variableName} => new {resolverType.Name}({GenerateParams(variableName, paramString)}),");
//             }
//         }
//
//         // FIXME: We need to check for duplicities
//         constructorParams = string.Join(", ", paramList.Select(p => $"{p.Type.Name} {p.Name}"));
//         methodBuilder.AppendLine("        _ => throw new ArgumentException(\"Unknown variable type: \" + variable.GetType().Name)");
//
//         return methodBuilder.ToString();
//     }
//
//     private static string GenerateParams(string variableName, string paramList)
//     {
//         return string.IsNullOrWhiteSpace(paramList) ? variableName : $"{variableName}, {paramList}";
//     }
// }
